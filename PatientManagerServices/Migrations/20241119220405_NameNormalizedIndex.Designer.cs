// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PatientManagerServices.Models;

#nullable disable

namespace PatientManagerServices.Migrations
{
    [DbContext(typeof(PmDbContext))]
    [Migration("20241119220405_NameNormalizedIndex")]
    partial class NameNormalizedIndex
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.18")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("PatientManagerServices.Models.Examination", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ExaminationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uuid");

                    b.Property<int?>("IllnessId")
                        .HasColumnType("integer");

                    b.Property<int>("MedicalHistoryId")
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("IllnessId");

                    b.HasIndex("MedicalHistoryId");

                    b.ToTable("Examinations");
                });

            modelBuilder.Entity("PatientManagerServices.Models.Illness", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateOnly?>("End")
                        .HasColumnType("date");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uuid");

                    b.Property<int>("MedicalHistoryId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateOnly>("Start")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("MedicalHistoryId");

                    b.ToTable("Illnesses");
                });

            modelBuilder.Entity("PatientManagerServices.Models.MedicalHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid>("Guid")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("MedicalHistories");
                });

            modelBuilder.Entity("PatientManagerServices.Models.Patient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid>("Guid")
                        .HasColumnType("uuid");

                    b.Property<string>("Mbo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("MedicalHistoryId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NameNormalized")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasAlternateKey("NameNormalized");

                    b.HasIndex("MedicalHistoryId");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("PatientManagerServices.Models.Examination", b =>
                {
                    b.HasOne("PatientManagerServices.Models.Illness", "Illness")
                        .WithMany("Examinations")
                        .HasForeignKey("IllnessId");

                    b.HasOne("PatientManagerServices.Models.MedicalHistory", "MedicalHistory")
                        .WithMany("Examinations")
                        .HasForeignKey("MedicalHistoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Illness");

                    b.Navigation("MedicalHistory");
                });

            modelBuilder.Entity("PatientManagerServices.Models.Illness", b =>
                {
                    b.HasOne("PatientManagerServices.Models.MedicalHistory", "MedicalHistory")
                        .WithMany("PastIlnesses")
                        .HasForeignKey("MedicalHistoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MedicalHistory");
                });

            modelBuilder.Entity("PatientManagerServices.Models.Patient", b =>
                {
                    b.HasOne("PatientManagerServices.Models.MedicalHistory", "MedicalHistory")
                        .WithMany()
                        .HasForeignKey("MedicalHistoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MedicalHistory");
                });

            modelBuilder.Entity("PatientManagerServices.Models.Illness", b =>
                {
                    b.Navigation("Examinations");
                });

            modelBuilder.Entity("PatientManagerServices.Models.MedicalHistory", b =>
                {
                    b.Navigation("Examinations");

                    b.Navigation("PastIlnesses");
                });
#pragma warning restore 612, 618
        }
    }
}
